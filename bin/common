#!/usr/bin/env sh

# Common functions useful for scripts
#
# Changelog:
#   2025-02-03  Allow log level names critical and warn
#   2025-02-03  Add filter_path and update next_in_path to handle
#               symlinks
#   2021-01-17  Fix sem_lock erroring without explicit wait
#   2021-01-17  Fix sem_release not working without mv suffix
#   2020-08-02  Add sem_* functions for in-script locking
#   2020-01-29  Add template
#   2019-09-15  Add grab_help and die_help
#   2017-11-27  Add run_as function
#   2017-07-07  Add arg function
#   2017-07-07  Fix invalid return codes on args_in
#   2017-03-27  Ignore fd 2 if SH_LOG_STDERR is set
#   2017-03-24  If no stderr is attached use either notify-send or
#               syslog
#   2017-03-24  Flatten hierarchy of log()
#   2016-11-15  Fix mktmp() appending to TMPDIR instead of writing
#               a file under it
#   2016-10-27  Test for absolute path on cat_or_exec_in
#   2016-10-16  Add mktmp
#   2016-10-15  Add cat_or_exec_in
#   2016-10-15  Make awk script in next_in_path more readable
#   2016-10-11  args_in returns proper codes instead of die'ing
#   2016-10-09  Fix testing wrong fd in log()
#   2016-10-09  Fix critical => crit
#   2016-10-09  Add args_in function
#   2016-09-11  Fix assignment instead of defaulting on DEBUG and
#               funcdepth
#   2016-09-10  Add syslog-output log log()

# The MIT License (MIT)
# Copyright (c) 2016 Nelo-T. wallus <nelo@wallus.de>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Logging function, prints to stderr or syslog
log() {
    level=$1
    leveltxt=$1
    shift

    # the lower the level the less output there is
    case "$level" in
        (crit|critical) level=0;;
        (warn|warning)  level=10;;
        (info)          level=20;;
        (debug)         level=30;;
    esac

    if test "$level" -gt ${DEBUG:-20}; then
        return
    fi

    output=""
    if test -n "$SH_LOG_FULLPATH"; then
        output="${output}$0"
    else
        output="${output}$(basename $0)"
    fi
    output="${output}[$$]:"

    # FUNCNAME is not in the posix spec and afaik only implemented
    # in bash and zsh, but it provides useful information, so it's
    # added if available
    if test -n "$FUNCNAME"; then
        output="${output}${FUNCNAME[${funcdepth:-1}]}():"
    fi

    output="${output}${leveltxt}: $@"

    if test -z "$SH_LOG_STDERR" && ! test -t 2; then
        # Presumable subhsell of an X session, log via notifyd
        if test -n "$XDG_DATA_DIRS"; then
            notify-send "$output"
            return
        fi

        # Not a subshell of X and no stderr attached, log to syslog
        if test -n "$SH_LOG_SYSLOG"; then
            # -p is not posix-compliant but rfc5424-compliant and bloody
            # useful
            logger -p "${SH_LOG_SYSLOG:-local0}.$leveltxt" "$output"
            return
        fi
    fi

    echo $output >&2
}

die() {
    funcdepth=2 log crit "$@, aborting"
    exit ${errno:-1}
}

# Returns
#   1   if argument one is lower than argument two
#   2   if argument one is high than argument three, if passed
#   127 if no or one argument has been passed
#   128 if four or more arguments has been passed
#   0   otherwise
args_in() {
    test $# -le 1 && return 127
    test $# -ge 4 && return 128

    test $1 -ge $2 || return 1

    if test $# -eq 3; then
        test $1 -le $3 || return 2
    fi
}

# A function may take arguments in the style of `key=value`.
# This function takes key as the first argument and an arbitrary number
# of k/v pairs and returns the value where the key matches.
#
# Args
#   <key>       Key to find in following k/v pairs
#   [<k=v>...]  key/value pairs
# Returns
#   0 and echoes found value on found key
#   1 if key was not found
arg() {
    key=$1
    shift

    for kv in "$@"; do
        k="${kv%=*}"
        v="${kv#*=}"

        if test "$k" = "$key"; then
            echo "$v"
            return 0
        fi
    done

    return 1
}

filter_path() {
    echo $PATH | while read -d: p; do
        [ "$p" = "$1" ] && continue
        echo -n "$p:"
    done
}

# next_in_path returns the next executable in the path after the calling
# script. This is primarily useful for wrappers around existing
# commands to pass e.g. default arguments or dynamically set environment
# variables.
next_in_path() {
    target="$0"
    # Resolve if the calling $0 is a symlink to a wrapper script.
    [ -L "$target" ] && target="$(readlink -f "$target")"

    log debug "Grabbing next path for $target"
    PATH="$(filter_path "$(dirname "$target")")" command -v "$(basename "$target")"
}

now() {
    date "+%Y-%m-%d %H:%M:%S:%s"
}

__cat_or_exec_in_list_files() {
    find $@ \
            -type f \
            \( \
                -name $prefix'.conf' \
                -o \
                -name $prefix'.cfg' \
            \) \
            -exec echo conf '{}' ';' \
            -o \
            -name $prefix'.*' \
            -a \
            \( \
                -perm -0300 \
                -o \
                -perm -0030 \
                -o \
                -perm -0003 \
            \) \
            -exec echo exec '{}' ';'
}

__cat_or_exec_in_print_num() {
    args_in $# 1 1 || return -1
    tmp=${1##*/}
    echo ${tmp%%_*}
}

__cat_or_exec_in() {
    __cat_or_exec_in_list_files $@ \
        | while read type file
        do
            echo $(__cat_or_exec_in_print_num $file) $type $file
        done | sort | uniq | awk '{ print $2" "$3 }'
}

cat_or_exec_in() {
    args_in $# 1 || {
        log warning 'At least one parameter expected for cat_or_exec_in'
        return 1
    }

    export prefix='[0-9][0-9][0-9][0-9]_*'

    __cat_or_exec_in $@ | while read type file
    do
        case "$type" in
            (conf)
                cat $file
                ;;
            (exec)
                if test $(expr "$file" : '^/') -eq 1; then
                    $file
                else
                    ./$file
                fi

                export errno=$?
                if test $errno -ne 0; then
                    die "Executable '$file' failed with error code $errno"
                fi
                ;;
            (*)
                log warning "Unrecognized type '$type' of file '$file'"
                ;;
        esac
    done
}

# yields a semi-reliable value usable for temporary actions
mktmp() {
    echo ${TMPDIR:-/tmp}/$(basename $0)-$$-$(date +%T).tmp
}

# If a script must be run as a different user this function will compare
# the passed and current user id.
# Should the not match sudo is used to execute the calling script.
run_as() {
    target_uid="${1:-0}"
    test "$(id -u)" = "$target_uid" && return

    sudo -u "#$target_uid" $0 $@
    exit $?
}

_grab_help_check_mark() {
    target="$1"
    mark="$2"

    grep -q "# $mark" "$target"
}

_grab_help_grab_marks() {
    target="$1"
    mark="$2"

    awk "/# $mark/ { \$1=\"\"; \$2=\"\"; print \$0; }" < "$target"
}


_grab_help() {
    target="$1"
    mark="$2"
    category="$3"
    [ -z "$mark" ] && die "Empty mark passed"
    [ -z "$category" ] && die "Empty category passed"

    if ! _grab_help_check_mark "$target" "$mark"; then
        log debug "Category does not exist: $category (mark $mark)"
        return 1
    fi

    printf "$category:\n"
    _grab_help_grab_marks "$target" "$mark" | while read line; do
        printf "  $line\n"
    done
    printf "\n"
}

# grab_help retrieves documentation from comments in a script and prints
# it to stdout.
#
# This is by no means a complete solution - but it does offer quite an
# easy way to add help output to small scripts.
#
# Example:
#
# some_script.sh:
#   #!/usr/bin/env sh
#
#   . common
#
#   # ENV SOME_SCRIPT_GLOBAL_OPTION: An env var influencing behaviour
#   global_option="${SOME_SCRIPT_GLOBAL_OPTION:-default_value}"
#
#   # DESC A short script to display grab_help
#
#   if [ $# -eq 0 ]; then
#       grab_help
#       exit
#   fi
#
#   subcmd="$1"
#   shift
#
#   case "$subcmd" in
#       # SUB arg1: First subcommand
#       (arg1) do_stuff;;
#       # SUB arg2: Second subcommand
#       (arg2) do_other_stuff;;
#       (help) grab_help;;
#       (*) die_help "Unknown subcommand: $subcmd";;
#   esac
#
# Executing `./some_script.sh help` yields:
#   A short script to display grab_help
#
#   Environment variables:
#     SOME_SCRIPT_GLOBAL_OPTION: An env var influencing behaviour
#
#   Subcommands:
#     arg1: First subcommand
#     arg2: Second subcommand
grab_help() {
    target="$1"
    [ ! -f "$target" ] && target="$0"
    shift

    if _grab_help_check_mark "$target" DESC; then
        _grab_help_grab_marks "$target" DESC
        printf "\n"
    fi

    _grab_help "$target" ENV "Environment variables"
    _grab_help "$target" SUB Subcommands

    return 0
}

die_help() {
    printf "$@\n\n" >&2

    grab_help "$0"
    die "Invalid arguments"
}

# Small template function.
#
# Placeholders are marked with surrounding @'s, e.g. `@keyword@`.
# The function takes key/value pairs in the form `key=value` and
# replaces every occurrence of `@key@` in the source template with the
# passed value.
#
# All other symbols in the source template are not altered or modified.
#
# Arguments:
#   1: Source template
#   2: Target path, "-" will output to stdout
#   3 and counting: key/value pairs, keys and values with spaces must be
#     quoted.
#
# Example:
#   > cat example.template
#   This @is@ a test.
#   > template example.template - is=was
#   This was a test.
#   > template example.template - is="was not"
#   This was not a test.
template() {
    args_in $# 2 || die "Expected at least two arguments, source template and target path"

    template="$1"
    target="$2"
    shift 2

    awk_repls=""

    for arg in "$@"; do
        k="${arg%%=*}"
        v="${arg##*=}"
        awk_repls="$awk_repls {gsub(/@$k@/,\"$v\");} "
    done


    if [ "$target" = "-" ]; then
        awk "{ $awk_repls { print \$0 }; }" "$template"
    else
        awk "{ $awk_repls { print \$0 }; }" "$template" > "$target"
    fi
}

sem_path() {
    [ -z "$1" ] && die "No name for semaphore passed"
    local base_path="$TMPDIR/common-locks/"
    mkdir -p "$base_path"
    echo "$base_path/$1"
}

# sem_lock creates a file to act as a semaphore or mutex.
# If the target file already exists it waits according to the `wait`
# argument.
#
# If the lock cannot be acquired the functions returns a non-zero exit
# status.
#
# The lock file contains the following variables as source-able shell code:
#   msg - Abstract message
#   script - The `$0` of the script that created the lock
#   timestamp - The default `date` output at the creation time of the lock
#   pid - The process ID of the process that created the lock
#
# wait arguments, default is -1:
#   -1  wait indefinitely until the file can be created
#   0   do not wait at all
#   x   try for x seconds
#
# Examples:
#   // wait indefinitely
#   sem_lock example_lock wait=-1
#   // only try to acquire the lock once, then return
#   sem_lock example_lock wait=0
#   // try to acquire the lock for at most 60s
#   sem_lock example_lock wait=60
#
# Note: This is just a very barebone imitation of actual semaphores or
# mutexes. You'll be much safer to use e.g. flock(1).
#
# This version is for scripts were the control flow doesn't allow
# programs like flock(1) to work correctly - e.g. one of the limitations
# of flock(1) is that it always needs to run a command. It cannot lock
# a shell function for example.
#
# Additionally this version only accounts for exclusive locks.
sem_lock() {
    local lock="$(sem_path $1)"
    shift 1
    local dowait="$(arg wait "$@")"
    [ -z "$dowait" ] && dowait=-1

    local tries=0
    while true; do
        if [ -f "$lock" ]; then
            case "$dowait" in
                (-1) sleep 1; continue;;
                (0) return 1;;
            esac

            (( tries++ ))
            [ "$tries" -gt "$dowait" ] && return 1

            sleep 1
            continue
        fi

        {
            echo "msg='Lock created by \"$0\" at \"$(date)\" in process $$'"
            echo "script='$0'"
            echo "timestamp='$(date)'"
            echo "pid='$$'"
        } > "$lock"
        return 0
    done
}

# sem_locked checks if the file acting as a semaphore or mutex exists.
# If the file does not exist sem_locked will return with a non-zero
# return code.
sem_locked() {
    test -f "$(sem_path $1)"
}

# sem_release deletes the file that acts as a semaphore or mutex.
# If the file does not exist sem_release will return with a non-zero
# return code.
#
# sem_release does not check if the file was created by the current
# process or thread.
#
# If the argument `mv` has a value the file is renamed with the value as
# a suffix instead of deleted.
# This can be used to extract information which process and script last
# used the file for locking and at which time.
# The path to a lock file can be retrieved using `sem_path $lockname`.
#
# Examples:
#   // moves the file to /path/to/locks/example_lock.bkp
#   sem_release example_lock mv=.bkp
sem_release() {
    local sem="$(sem_path $1)"
    shift 1
    local mv="$(arg mv "$@")"

    if [ -n "$mv" ]; then
        mv "$sem" "$sem.$mv"
    else
        rm "$sem"
    fi
}
