#!/usr/bin/env sh

# Wrapper around tmux' various commands.
#
# ChangeLog:
#   2016-06-11  support switching/creating from within tmux
#               add option to nest session
#               add option to set pwd
#   2016-04-23  add option not to use grouped sessions (-l)
#   2016-03-23  attach without grouping on orphaned sessions
#   2016-03-16  grouped sessions by default

# The MIT License (MIT)
# Copyright (c) 2016 Nelo-T. wallus <nelo@wallus.de>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

case $1 in
    (-l|--link)
        link=1
        shift
        ;;
    (-n|--nest)
        unset TMUX
        shift
        ;;
    (-c)
        pwd="-c $2"
        shift 2
        ;;
esac

tmuxifier_has() {
    if tmuxifier list-$1 | grep $2; then
        return 0;
    fi
    return 1;
}

session_is_attached() {
    if tmux list-sessions | egrep "^$1:.*attached)$"; then
        return 0;
    fi
    return 1;
}

if [ $# -eq 0 ]; then
    # no parameter given, starting new session with tmux' naming scheme
    tmux new-session $pwd

elif [ $# -eq 1 ]; then

    if tmux has-session -t "$1"; then
        # attach and link if --link was passed or the session has no
        # attached client - otherwise group-attach
        if [ ${link:-0} -eq 1 ] || ! session_is_attached "$1"; then
            if [ -n "$TMUX" ]; then
                tmux switch-client -t "$1"
            else
                tmux attach-session -t "$1" $pwd
            fi
        else
            # get a random number from /dev/random to prevent attaching
            # to an existing grouped session
            random=$(od -An -d -N2 /dev/random | sed 's# ##')

            # define grouped session name
            group_sess_name="$1-group-$random"

            if [ -n "$TMUX" ]; then
                tmux new-session -d -t "$1" -s "$group_sess_name" $pwd
                tmux switch-client -t "$group_sess_name"
            else
                tmux new-session -A -t "$1" -s "$group_sess_name" $pwd

                # kill session if it exists after exiting the client
                #
                # has to be in else since `switch-client` exits and the
                # rest of the script evaluates - killing the session and
                # disconnecting the client
                if tmux has-session -t "$group_sess_name"; then
                    tmux kill-session -t "$group_sess_name"
                fi
            fi
        fi

    elif tmuxifier_has sessions $1; then
        # if the parameter is the name of a session layout start that
        tmuxifier load-session "$1"

    elif tmuxifier_has windows $1; then
        # if the parameter is the name of a window layout start that
        tmuxifier load-window "$1"

    else
        # the parameter is not a running session nor a layout - start
        # a new session with that name
        if [ -n "$TMUX" ]; then
            tmux new-session -d -s "$1" $pwd
            tmux switch-client -t "$1"
        else
            tmux new-session -A -s "$1" $pwd
        fi
    fi

else
    exit 1
fi
