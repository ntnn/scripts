emulate -L zsh

# ZSH accept-line function.
# Compiles files on the fly before execution.
#
# E.g.:
#   $ cat ~/bin/testthis.go
#   package main
#   import "fmt"
#
#   func main() {
#       fmt.Println("Works")
#   }
#   $ autoload -Uz pre_compile
#   $ my_accept_line() { pre_compile; zle accept-line }
#   # zle -N pre_compile
#   # bindkey '^M' pre_compile
#   $ testthis
#   Works
#
# Changelog:
#   2017-10-29  Complete rewrite to a more generic solution
#   2017-02-07  Drop additional checks, rely on exit code of _full_path
#   2017-02-07  Drop expansion, filtered above
#   2017-02-07  Fix added space between cmd/arguments
#   2017-02-07  Fix invalid subscript range on empty buffer
#   2016-11-10  Use as accept-line hook instead of preexec hook to modify BUFFER
#   2016-11-09  Add go-compile
#
# The MIT License (MIT)
# Copyright (c) 2016 Nelo-T. wallus <nelo@wallus.de>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# Return if buffer is empty
[[ "$BUFFER" =~ '^[[:space:]]*$' ]] && return 0

# Save command and rest of command line separately
cmd="${BUFFER[(w)1]}"
cmdline=$BUFFER
cmdline[(w)1]=''

# Find source file for target
source_file=$(find ${(@s/ /)PATH//:/ } -name "$cmd.*" -type f 2>/dev/null)
# No source file found, return
[[ -z "$source_file" ]] && return
out_path="${source_file%.*}"

ext="${cmd##*.}"
[[ -z "$ext" || "$ext" == "$cmd" ]] && ext="${source_file##*.}"

new_cmd="${cmd%.*}"
[[ -n "$new_cmd" ]] && cmd="$new_cmd"

# Return if source file is older than binary
[[ "$source_file" -ot "$out_path" ]] && return

# Compile functions expect the output path as the first argument and all
# files to be compiled into the binary as additional arguments.
compile_c() {
    gcc -o $@
}

compile_cxx() {
    g++ -o $@
}

compile_go() {
    go build -o $@
}

# No compile function matching the extension found, return early
if ! type compile_${ext} 2>/dev/null > /dev/null; then
    echo "No function to compile a file with the extension $ext found." >&2
fi

compile_${ext} $out_path $source_file
